---
# .fo.yaml - Configuration for fo utility

# Global settings
stream: false # Default to capture mode
show_output: "on-fail" # Only show output on failure
max_buffer_size: 10485760 # 10MB buffer limit
max_line_length: 1048576 # 1MB max line length
no_timer: false # Show execution time
no_color: false # Use colors
ci: false # Not CI mode
debug: false # Set via CLI flag usually

# Global style settings
style:
  use_inline_progress: true # Enable inline progress indicator
  no_spinner: false # Enable spinner animation
  spinner_interval: 80 # Milliseconds between spinner updates

# Active theme selection
active_theme: "unicode_vibrant"

# Theme definitions
themes:
  unicode_vibrant:
    style:
      use_boxes: true
      indentation: "  "
      show_timestamps: false
      no_timer: false
      density: "balanced"
      use_inline_progress: true # This enables spinner logic in Go code

    # Icons
    icons:
      start: "▶️"
      success: "✅"
      warning: "⚠️"
      error: "❌"
      info: "ℹ️"
      bullet: "•"

    # Colors - These are the raw ANSI codes your Go code will process
    # ensureEscapePrefix will turn these into actual \x1b sequences.
    colors:
      Process: "\033[0;97m" # White (used by default for some headers if not overridden by element)
      Success: "\033[0;97m" # White (used by default for success type if not overridden)
      Warning: "\033[0;33m" # Yellow
      Error: "\033[0;31m" # Red
      Detail: "\033[0m" # Default/Reset (usually no color)
      Muted: "\033[2m" # Dim
      Reset: "\033[0m" # ANSI Reset

      # Specific colors for precise control via element styles
      White: "\033[0;97m" # Bright White foreground
      BlueBg: "\033[44m" # Blue Background
      Bold: "\033[1m"
      Italic: "\033[3m"
      # Add other specific color names + codes if your element styles refer to them

    # Border characters (primarily for non-inline progress Task rendering)
    border:
      task_style: "left_double" # Example, can be 'none' for fo print
      header_char: "═"
      vertical_char: "│"
      top_corner_char: "╒"
      bottom_corner_char: "└"
      footer_continuation_char: "─"

    # Element styles
    # These are keys your Go `RenderDirectMessage` or other render functions will use.
    elements:
      # For: fo print --type "header" --icon "▶️" --message "Check for required tools"
      Print_Header_Highlight:
        color_fg: "White" # Refers to colors.White
        color_bg: "BlueBg" # Refers to colors.BlueBg
        text_style: ["bold"] # Refers to colors.Bold
        icon_key: "Start" # Uses icons.Start for ▶️ (optional if icon passed via CLI)

      # For: fo print --type "success" --icon "✅" --message "Go: ..."
      Print_Success_Style:
        color_fg: "Success" # Refers to colors.Success (which is white)
        icon_key: "Success" # Uses icons.Success for ✅ (optional if icon passed via CLI)

      # You can define styles for other `fo print --type <type>` if needed
      Print_Warning_Style:
        color_fg: "Warning"
        icon_key: "Warning"
      Print_Error_Style:
        color_fg: "Error"
        icon_key: "Error"
      Print_Info_Style:
        color_fg: "Process" # Or another color you define for info text
        icon_key: "Info"

      # Styles for the fo -- <command> wrapper output (Task rendering)
      Task_Label_Header:
        text_case: "upper"
        text_style: ["bold"]
        color_fg: "Process" # Default white for this in your theme

      Task_StartIndicator_Line:
        icon_key: "Start"
        color_fg: "Process" # Default white

      Task_Status_Success_Block:
        icon_key: "Success"
        text_content: "Complete"
        color_fg: "Success" # Default white

      Task_Status_Failed_Block:
        icon_key: "Error"
        text_content: "Failed"
        color_fg: "Error"

      Task_Status_Warning_Block:
        icon_key: "Warning"
        text_content: "Completed with warnings"
        color_fg: "Warning"

      Task_Status_Duration:
        prefix: "("
        suffix: ")"
        color_fg: "Muted"

      Task_Progress_Line: # For the inline spinner
        additional_chars: "-\\|/" # Simple ASCII spinner, works everywhere
        # additional_chars: "⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏" # Braille spinner (example)

      Stdout_Line_Prefix:
        additional_chars: "  " # For indenting captured output
      Stderr_Warning_Line_Prefix:
        icon_key: "Warning"
        additional_chars: "  "
        color_fg: "Warning"
      Stderr_Error_Line_Prefix:
        icon_key: "Error"
        additional_chars: "  "
        color_fg: "Error"
      Task_Content_Stderr_Warning_Text: # Text color for stderr warning lines
        color_fg: "Warning"
      Task_Content_Stderr_Error_Text: # Text color for stderr error lines
        color_fg: "Error"

      Task_Content_Summary_Heading:
        text_content: "SUMMARY:"
        text_style: ["bold"]
        color_fg: "Process" # Default white
      Task_Content_Summary_Item_Error:
        bullet_char: "•"
        color_fg: "Error"
      Task_Content_Summary_Item_Warning:
        bullet_char: "•"
        color_fg: "Warning"

  # ASCII minimal theme for CI environments or --no-color / --ci flags
  ascii_minimal:
    style:
      use_boxes: false
      indentation: "  "
      show_timestamps: false
      no_timer: false
      density: "compact"
      use_inline_progress: true # Spinner will be plain text

    icons:
      start: "[START]"
      success: "[SUCCESS]"
      warning: "[WARNING]"
      error: "[FAILED]"
      info: "[INFO]"
      bullet: "*"

    # No colors defined for monochrome
    colors: {} # Empty, IsMonochrome flag in Go code will prevent color lookups

    elements:
      Print_Header_Highlight: # Plain text version
        text_style: ["bold"] # If your monochrome still wants some emphasis
        icon_key: "Start"
      Print_Success_Style:
        icon_key: "Success"

      Task_Status_Success_Block: { text_content: "SUCCESS" }
      Task_Status_Failed_Block: { text_content: "FAILED" }
      Task_Status_Warning_Block: { text_content: "WARNING" }
      Task_Status_Duration: { prefix: "(", suffix: ")" }
      Task_Progress_Line: { additional_chars: "-\\|/" } # ASCII spinner

# Command presets (examples, adjust as needed)
presets:
  go:
    label: "Go Task" # Generic label for 'go' commands
    intent: "building" # Default intent for 'go'

  "go build": # More specific preset
    label: "Go Build"
    intent: "building"

  "go test":
    label: "Testing"
    intent: "testing"
    # stream: true # You might want tests to stream by default

  golangci-lint:
    label: "Linting"
    intent: "linting"

  yamllint:
    label: "YAML Linting"
    intent: "linting"
